// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: auth2soc.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Auth2SocService_CreateNode_FullMethodName = "/auth2soc.Auth2SocService/CreateNode"
)

// Auth2SocServiceClient is the client API for Auth2SocService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Auth2SocServiceClient interface {
	CreateNode(ctx context.Context, in *MakeNodeRequest, opts ...grpc.CallOption) (*MakeNodeResponse, error)
}

type auth2SocServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuth2SocServiceClient(cc grpc.ClientConnInterface) Auth2SocServiceClient {
	return &auth2SocServiceClient{cc}
}

func (c *auth2SocServiceClient) CreateNode(ctx context.Context, in *MakeNodeRequest, opts ...grpc.CallOption) (*MakeNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MakeNodeResponse)
	err := c.cc.Invoke(ctx, Auth2SocService_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Auth2SocServiceServer is the server API for Auth2SocService service.
// All implementations must embed UnimplementedAuth2SocServiceServer
// for forward compatibility
type Auth2SocServiceServer interface {
	CreateNode(context.Context, *MakeNodeRequest) (*MakeNodeResponse, error)
	mustEmbedUnimplementedAuth2SocServiceServer()
}

// UnimplementedAuth2SocServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuth2SocServiceServer struct {
}

func (UnimplementedAuth2SocServiceServer) CreateNode(context.Context, *MakeNodeRequest) (*MakeNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedAuth2SocServiceServer) mustEmbedUnimplementedAuth2SocServiceServer() {}

// UnsafeAuth2SocServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Auth2SocServiceServer will
// result in compilation errors.
type UnsafeAuth2SocServiceServer interface {
	mustEmbedUnimplementedAuth2SocServiceServer()
}

func RegisterAuth2SocServiceServer(s grpc.ServiceRegistrar, srv Auth2SocServiceServer) {
	s.RegisterService(&Auth2SocService_ServiceDesc, srv)
}

func _Auth2SocService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auth2SocServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth2SocService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auth2SocServiceServer).CreateNode(ctx, req.(*MakeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth2SocService_ServiceDesc is the grpc.ServiceDesc for Auth2SocService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth2SocService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth2soc.Auth2SocService",
	HandlerType: (*Auth2SocServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _Auth2SocService_CreateNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth2soc.proto",
}
